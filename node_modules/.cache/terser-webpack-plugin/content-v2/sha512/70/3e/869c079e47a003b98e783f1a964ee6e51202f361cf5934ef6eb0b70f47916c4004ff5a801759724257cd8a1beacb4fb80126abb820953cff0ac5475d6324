{"code":"!function(e){var r={};function n(t){if(r[t])return r[t].exports;var i=r[t]={i:t,l:!1,exports:{}};return e[t].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=r,n.d=function(e,r,t){n.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,r){if(1&r&&(e=n(e)),8&r)return e;if(4&r&&\"object\"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,\"default\",{enumerable:!0,value:e}),2&r&&\"string\"!=typeof e)for(var i in e)n.d(t,i,function(r){return e[r]}.bind(null,i));return t},n.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(r,\"a\",r),r},n.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},n.p=\"\",n(n.s=0)}([function(e,r,n){\"use strict\";n.r(r),function(e,n){n.exports={entry:\"./src/index.js\",output:{path:path.resolve(e,\"lib\"),filename:\"bundle.js\"}};class t{constructor(e,r,n){if(this.uniforms={},this.webGL=n,this.program=n.createProgram(),n.attachShader(this.program,e),n.attachShader(this.program,r),n.linkProgram(this.program),!n.getProgramParameter(this.program,n.LINK_STATUS))throw n.getProgramInfoLog(this.program);const t=n.getProgramParameter(this.program,n.ACTIVE_UNIFORMS);for(let e=0;e<t;e++){const r=n.getActiveUniform(this.program,e).name;this.uniforms[r]=n.getUniformLocation(this.program,r)}}bind(){this.webGL.useProgram(this.program)}}r.default=class{constructor(e){this.deactivated={is:!1},this.activated={is:!1},this.PARAMS={sim_resolution:128,dye_resolution:512,paused:!1,clamp_values:!0,dissipation:.99,velocity:.99,pressure:1,pressure_iteration:10,fluid_color:[[0,0,0],[.4,.2,0]],curl:0,emitter_size:.5,render_shaders:!0,multi_color:!0,render_bloom:!1,bloom_resolution:1024,bloom_iterations:1,intensity:.6,threshold:.3,soft_knee:1,background_color:{r:20,g:20,b:20},transparent:!1},this.DRAWING_PARAMS={alpha:!0,depth:!1,stencil:!1,antialias:!1,preserveDrawingBuffer:!1,powerPreference:\"default\"},this.SHADER_SOURCE={blank:\"\",vertex:\"\\n                  precision highp float;\\n              \\n                  attribute vec2 aPosition;\\n                  varying vec2 vUv;\\n                  varying vec2 vL;\\n                  varying vec2 vR;\\n                  varying vec2 vT;\\n                  varying vec2 vB;\\n                  uniform vec2 texelSize;\\n              \\n                  void main () {\\n                      vUv = aPosition * 0.5 + 0.5;\\n                      vL = vUv - vec2(texelSize.x, 0.0);\\n                      vR = vUv + vec2(texelSize.x, 0.0);\\n                      vT = vUv + vec2(0.0, texelSize.y);\\n                      vB = vUv - vec2(0.0, texelSize.y);\\n                      gl_Position = vec4(aPosition, 0.0, 1.0);\\n                  }\",clear:\"\\n                  precision mediump float;\\n                  precision mediump sampler2D;\\n              \\n                  varying highp vec2 vUv;\\n                  uniform sampler2D uTexture;\\n                  uniform float value;\\n              \\n                  void main () {\\n                      gl_FragColor = value * texture2D(uTexture, vUv);\\n                  }\\n              \",color:\"\\n                  precision mediump float;\\n              \\n                  uniform vec4 color;\\n              \\n                  void main () {\\n                      gl_FragColor = color;\\n                  }\\n              \",background:\"\\n                  precision highp float;\\n                  precision highp sampler2D;\\n              \\n                  varying vec2 vUv;\\n                  uniform sampler2D uTexture;\\n                  uniform float aspectRatio;\\n              \\n                  #define SCALE 25.0\\n              \\n                  void main () {\\n                      vec2 uv = floor(vUv * SCALE * vec2(aspectRatio, 1.0));\\n                      float v = mod(uv.x + uv.y, 2.0);\\n                      v = v * 0.1 + 0.8;\\n                      gl_FragColor = vec4(vec3(v), 1.0);\\n                  }\\n              \",pictureBackground:\" \\n                    void main() { \\n                        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0); \\n                    } \\n            \",display:\"\\n                  precision highp float;\\n                  precision highp sampler2D;\\n              \\n                  varying vec2 vUv;\\n                  uniform sampler2D uTexture;\\n              \\n                  void main () {\\n                      vec3 C = texture2D(uTexture, vUv).rgb;\\n                      float a = max(C.r, max(C.g, C.b));\\n                      gl_FragColor = vec4(C, a);\\n                  }\\n              \",displayBloom:\"\\n          precision highp float;\\n          precision highp sampler2D;\\n      \\n          varying vec2 vUv;\\n          uniform sampler2D uTexture;\\n          uniform sampler2D uBloom;\\n          uniform sampler2D uDithering;\\n          uniform vec2 ditherScale;\\n      \\n          void main () {\\n              vec3 C = texture2D(uTexture, vUv).rgb;\\n              vec3 bloom = texture2D(uBloom, vUv).rgb;\\n              vec3 noise = texture2D(uDithering, vUv * ditherScale).rgb;\\n              noise = noise * 2.0 - 1.0;\\n              bloom += noise / 800.0;\\n              bloom = pow(bloom.rgb, vec3(1.0 / 2.2));\\n              C += bloom;\\n              float a = max(C.r, max(C.g, C.b));\\n              gl_FragColor = vec4(C, a);\\n          }\\n      \",displayShading:\"\\n          precision highp float;\\n          precision highp sampler2D;\\n      \\n          varying vec2 vUv;\\n          varying vec2 vL;\\n          varying vec2 vR;\\n          varying vec2 vT;\\n          varying vec2 vB;\\n          uniform sampler2D uTexture;\\n          uniform vec2 texelSize;\\n      \\n          void main () {\\n              vec3 L = texture2D(uTexture, vL).rgb;\\n              vec3 R = texture2D(uTexture, vR).rgb;\\n              vec3 T = texture2D(uTexture, vT).rgb;\\n              vec3 B = texture2D(uTexture, vB).rgb;\\n              vec3 C = texture2D(uTexture, vUv).rgb;\\n      \\n              float dx = length(R) - length(L);\\n              float dy = length(T) - length(B);\\n      \\n              vec3 n = normalize(vec3(dx, dy, length(texelSize)));\\n              vec3 l = vec3(0.0, 0.0, 1.0);\\n      \\n              float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\\n              C.rgb *= diffuse;\\n      \\n              float a = max(C.r, max(C.g, C.b));\\n              gl_FragColor = vec4(C, a);\\n          }\\n      \",displayBloomShading:\"\\n          precision highp float;\\n          precision highp sampler2D;\\n      \\n          varying vec2 vUv;\\n          varying vec2 vL;\\n          varying vec2 vR;\\n          varying vec2 vT;\\n          varying vec2 vB;\\n          uniform sampler2D uTexture;\\n          uniform sampler2D uBloom;\\n          uniform sampler2D uDithering;\\n          uniform vec2 ditherScale;\\n          uniform vec2 texelSize;\\n      \\n          void main () {\\n              vec3 L = texture2D(uTexture, vL).rgb;\\n              vec3 R = texture2D(uTexture, vR).rgb;\\n              vec3 T = texture2D(uTexture, vT).rgb;\\n              vec3 B = texture2D(uTexture, vB).rgb;\\n              vec3 C = texture2D(uTexture, vUv).rgb;\\n      \\n              float dx = length(R) - length(L);\\n              float dy = length(T) - length(B);\\n      \\n              vec3 n = normalize(vec3(dx, dy, length(texelSize)));\\n              vec3 l = vec3(0.0, 0.0, 1.0);\\n      \\n              float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\\n              C *= diffuse;\\n      \\n              vec3 bloom = texture2D(uBloom, vUv).rgb;\\n              vec3 noise = texture2D(uDithering, vUv * ditherScale).rgb;\\n              noise = noise * 2.0 - 1.0;\\n              bloom += noise / 800.0;\\n              bloom = pow(bloom.rgb, vec3(1.0 / 2.2));\\n              C += bloom;\\n      \\n              float a = max(C.r, max(C.g, C.b));\\n              gl_FragColor = vec4(C, a);\\n          }\\n      \",bloomPreFilter:\"\\n          precision mediump float;\\n          precision mediump sampler2D;\\n      \\n          varying vec2 vUv;\\n          uniform sampler2D uTexture;\\n          uniform vec3 curve;\\n          uniform float threshold;\\n      \\n          void main () {\\n              vec3 c = texture2D(uTexture, vUv).rgb;\\n              float br = max(c.r, max(c.g, c.b));\\n              float rq = clamp(br - curve.x, 0.0, curve.y);\\n              rq = curve.z * rq * rq;\\n              c *= max(rq, br - threshold) / max(br, 0.0001);\\n              gl_FragColor = vec4(c, 0.0);\\n          }\\n      \",bloomBlur:\"\\n          precision mediump float;\\n          precision mediump sampler2D;\\n      \\n          varying vec2 vL;\\n          varying vec2 vR;\\n          varying vec2 vT;\\n          varying vec2 vB;\\n          uniform sampler2D uTexture;\\n      \\n          void main () {\\n              vec4 sum = vec4(0.0);\\n              sum += texture2D(uTexture, vL);\\n              sum += texture2D(uTexture, vR);\\n              sum += texture2D(uTexture, vT);\\n              sum += texture2D(uTexture, vB);\\n              sum *= 0.25;\\n              gl_FragColor = sum;\\n          }\\n      \",bloomFinal:\"\\n          precision mediump float;\\n          precision mediump sampler2D;\\n      \\n          varying vec2 vL;\\n          varying vec2 vR;\\n          varying vec2 vT;\\n          varying vec2 vB;\\n          uniform sampler2D uTexture;\\n          uniform float intensity;\\n      \\n          void main () {\\n              vec4 sum = vec4(0.0);\\n              sum += texture2D(uTexture, vL);\\n              sum += texture2D(uTexture, vR);\\n              sum += texture2D(uTexture, vT);\\n              sum += texture2D(uTexture, vB);\\n              sum *= 0.25;\\n              gl_FragColor = sum * intensity;\\n          }\\n      \",splat:\"\\n          precision highp float;\\n          precision highp sampler2D;\\n      \\n          varying vec2 vUv;\\n          uniform sampler2D uTarget;\\n          uniform float aspectRatio;\\n          uniform vec3 color;\\n          uniform vec2 point;\\n          uniform float radius;\\n      \\n          void main () {\\n              vec2 p = vUv - point.xy;\\n              p.x *= aspectRatio;\\n              vec3 splat = exp(-dot(p, p) / radius) * color;\\n              vec3 base = texture2D(uTarget, vUv).xyz;\\n              gl_FragColor = vec4(base + splat, 1.0);\\n          }\\n      \",advectionManualFiltering:\"\\n          precision highp float;\\n          precision highp sampler2D;\\n      \\n          varying vec2 vUv;\\n          uniform sampler2D uVelocity;\\n          uniform sampler2D uSource;\\n          uniform vec2 texelSize;\\n          uniform vec2 dyeTexelSize;\\n          uniform float dt;\\n          uniform float dissipation;\\n      \\n          vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\\n              vec2 st = uv / tsize - 0.5;\\n      \\n              vec2 iuv = floor(st);\\n              vec2 fuv = fract(st);\\n      \\n              vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\\n              vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\\n              vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\\n              vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\\n      \\n              return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\\n          }\\n      \\n          void main () {\\n              vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\\n              gl_FragColor = dissipation * bilerp(uSource, coord, dyeTexelSize);\\n              gl_FragColor.a = 1.0;\\n          }\\n      \",advection:\"\\n          precision highp float;\\n          precision highp sampler2D;\\n      \\n          varying vec2 vUv;\\n          uniform sampler2D uVelocity;\\n          uniform sampler2D uSource;\\n          uniform vec2 texelSize;\\n          uniform float dt;\\n          uniform float dissipation;\\n      \\n          void main () {\\n              vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\\n              gl_FragColor = dissipation * texture2D(uSource, coord);\\n              gl_FragColor.a = 1.0;\\n          }\\n      \",divergence:\"\\n          precision mediump float;\\n          precision mediump sampler2D;\\n      \\n          varying highp vec2 vUv;\\n          varying highp vec2 vL;\\n          varying highp vec2 vR;\\n          varying highp vec2 vT;\\n          varying highp vec2 vB;\\n          uniform sampler2D uVelocity;\\n      \\n          void main () {\\n              float L = texture2D(uVelocity, vL).x;\\n              float R = texture2D(uVelocity, vR).x;\\n              float T = texture2D(uVelocity, vT).y;\\n              float B = texture2D(uVelocity, vB).y;\\n      \\n              vec2 C = texture2D(uVelocity, vUv).xy;\\n              if (vL.x < 0.0) { L = -C.x; }\\n              if (vR.x > 1.0) { R = -C.x; }\\n              if (vT.y > 1.0) { T = -C.y; }\\n              if (vB.y < 0.0) { B = -C.y; }\\n      \\n              float div = 0.5 * (R - L + T - B);\\n              gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\\n          }\\n      \",curl:\"\\n          precision mediump float;\\n          precision mediump sampler2D;\\n      \\n          varying highp vec2 vUv;\\n          varying highp vec2 vL;\\n          varying highp vec2 vR;\\n          varying highp vec2 vT;\\n          varying highp vec2 vB;\\n          uniform sampler2D uVelocity;\\n      \\n          void main () {\\n              float L = texture2D(uVelocity, vL).y;\\n              float R = texture2D(uVelocity, vR).y;\\n              float T = texture2D(uVelocity, vT).x;\\n              float B = texture2D(uVelocity, vB).x;\\n              float vorticity = R - L - T + B;\\n              gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\\n          }\\n      \",vorticity:\"\\n          precision highp float;\\n          precision highp sampler2D;\\n      \\n          varying vec2 vUv;\\n          varying vec2 vL;\\n          varying vec2 vR;\\n          varying vec2 vT;\\n          varying vec2 vB;\\n          uniform sampler2D uVelocity;\\n          uniform sampler2D uCurl;\\n          uniform float curl;\\n          uniform float dt;\\n      \\n          void main () {\\n              float L = texture2D(uCurl, vL).x;\\n              float R = texture2D(uCurl, vR).x;\\n              float T = texture2D(uCurl, vT).x;\\n              float B = texture2D(uCurl, vB).x;\\n              float C = texture2D(uCurl, vUv).x;\\n      \\n              vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\\n              force /= length(force) + 0.0001;\\n              force *= curl * C;\\n              force.y *= -1.0;\\n      \\n              vec2 vel = texture2D(uVelocity, vUv).xy;\\n              gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\\n          }\\n      \",pressure:\"\\n          precision mediump float;\\n          precision mediump sampler2D;\\n      \\n          varying highp vec2 vUv;\\n          varying highp vec2 vL;\\n          varying highp vec2 vR;\\n          varying highp vec2 vT;\\n          varying highp vec2 vB;\\n          uniform sampler2D uPressure;\\n          uniform sampler2D uDivergence;\\n      \\n          vec2 boundary (vec2 uv) {\\n              return uv;\\n              // uncomment if you use wrap or repeat texture mode\\n              // uv = min(max(uv, 0.0), 1.0);\\n              // return uv;\\n          }\\n      \\n          void main () {\\n              float L = texture2D(uPressure, boundary(vL)).x;\\n              float R = texture2D(uPressure, boundary(vR)).x;\\n              float T = texture2D(uPressure, boundary(vT)).x;\\n              float B = texture2D(uPressure, boundary(vB)).x;\\n              float C = texture2D(uPressure, vUv).x;\\n              float divergence = texture2D(uDivergence, vUv).x;\\n              float pressure = (L + R + B + T - divergence) * 0.25;\\n              gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\\n          }\\n      \",gradientSubtract:\"\\n          precision mediump float;\\n          precision mediump sampler2D;\\n      \\n          varying highp vec2 vUv;\\n          varying highp vec2 vL;\\n          varying highp vec2 vR;\\n          varying highp vec2 vT;\\n          varying highp vec2 vB;\\n          uniform sampler2D uPressure;\\n          uniform sampler2D uVelocity;\\n      \\n          vec2 boundary (vec2 uv) {\\n              return uv;\\n              // uv = min(max(uv, 0.0), 1.0);\\n              // return uv;\\n          }\\n      \\n          void main () {\\n              float L = texture2D(uPressure, boundary(vL)).x;\\n              float R = texture2D(uPressure, boundary(vR)).x;\\n              float T = texture2D(uPressure, boundary(vT)).x;\\n              float B = texture2D(uPressure, boundary(vB)).x;\\n              vec2 velocity = texture2D(uVelocity, vUv).xy;\\n              velocity.xy -= vec2(R - L, T - B);\\n              gl_FragColor = vec4(velocity, 0.0, 1.0);\\n          }\\n      \"},e.width=e.clientWidth,e.height=e.clientHeight,this.canvas=e,this.initWebGL()}initWebGL(){this.deactivated.is=!1;let e=[];e.push(new function(){this.id=-1,this.x=0,this.y=0,this.dx=0,this.dy=0,this.down=!1,this.moved=!1,this.color=[30,0,300]}),this.pointers=e;let r=canvas.getContext(\"webgl2\",this.DRAWING_PARAMS);const n=!!r;n||(r=canvas.getContext(\"webgl\",this.DRAWING_PARAMS)||canvas.getContext(\"experimental-webgl\",this.DRAWING_PARAMS)),this.colorFormats=function(){let e,t,i,o,a;n?(r.getExtension(\"EXT_color_buffer_float\"),a=r.getExtension(\"OES_texture_float_linear\")):(o=r.getExtension(\"OES_texture_half_float\"),a=r.getExtension(\"OES_texture_half_float_linear\"));const u=n?r.HALF_FLOAT:o.HALF_FLOAT_OES;function l(e,n,t){let i,o=r.createTexture();r.bindTexture(r.TEXTURE_2D,o),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.texImage2D(r.TEXTURE_2D,0,e,4,4,0,n,t,null);let a=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,a),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,o,0);const u=r.checkFramebufferStatus(r.FRAMEBUFFER);if(!(i=u===r.FRAMEBUFFER_COMPLETE))switch(e){case r.R16F:return l(r.RG16F,r.RG,t);case r.RG16F:return l(r.RGBA16F,r.RGBA,t);default:return null}return{internalFormat:e,format:n}}return r.clearColor(0,0,0,1),n?(e=l(r.RGBA16F,r.RGBA,u),t=l(r.RG16F,r.RG,u),i=l(r.R16F,r.RED,u)):(e=l(r.RGBA,r.RGBA,u),t=l(r.RGBA,r.RGBA,u),i=l(r.RGBA,r.RGBA,u)),{formatRGBA:e,formatRG:t,formatR:i,halfFloatTexType:u,supportLinearFiltering:a}}(),/Mobi|Android/i.test(navigator.userAgent)&&(this.PARAMS.render_shaders=!1),this.colorFormats.supportLinearFiltering||(this.PARAMS.render_shaders=!1,this.PARAMS.render_bloom=!1);const i={baseVertex:a(r.VERTEX_SHADER,this.SHADER_SOURCE.vertex),clear:a(r.FRAGMENT_SHADER,this.SHADER_SOURCE.clear),color:a(r.FRAGMENT_SHADER,this.SHADER_SOURCE.color),background:a(r.FRAGMENT_SHADER,this.PARAMS.transparent?this.SHADER_SOURCE.pictureBackground:this.SHADER_SOURCE.background),display:a(r.FRAGMENT_SHADER,this.SHADER_SOURCE.display),displayBloom:a(r.FRAGMENT_SHADER,this.SHADER_SOURCE.displayBloom),displayShading:a(r.FRAGMENT_SHADER,this.SHADER_SOURCE.displayShading),displayBloomShading:a(r.FRAGMENT_SHADER,this.SHADER_SOURCE.displayBloomShading),bloomPreFilter:a(r.FRAGMENT_SHADER,this.SHADER_SOURCE.bloomPreFilter),bloomBlur:a(r.FRAGMENT_SHADER,this.SHADER_SOURCE.bloomBlur),bloomFinal:a(r.FRAGMENT_SHADER,this.SHADER_SOURCE.bloomFinal),splat:a(r.FRAGMENT_SHADER,this.SHADER_SOURCE.splat),advectionManualFiltering:a(r.FRAGMENT_SHADER,this.SHADER_SOURCE.advectionManualFiltering),advection:a(r.FRAGMENT_SHADER,this.SHADER_SOURCE.advection),divergence:a(r.FRAGMENT_SHADER,this.SHADER_SOURCE.divergence),curl:a(r.FRAGMENT_SHADER,this.SHADER_SOURCE.curl),vorticity:a(r.FRAGMENT_SHADER,this.SHADER_SOURCE.vorticity),pressure:a(r.FRAGMENT_SHADER,this.SHADER_SOURCE.pressure),gradientSubtract:a(r.FRAGMENT_SHADER,this.SHADER_SOURCE.gradientSubtract)};var o;function a(e,n){const t=r.createShader(e);if(r.shaderSource(t,n),r.compileShader(t),!r.getShaderParameter(t,r.COMPILE_STATUS))throw r.getShaderInfoLog(t);return t}this.programs=(o=this.colorFormats.supportLinearFiltering,{clearProgram:new t(i.baseVertex,i.clear,r),colorProgram:new t(i.baseVertex,i.color,r),backgroundProgram:new t(i.baseVertex,i.background,r),displayProgram:new t(i.baseVertex,i.display,r),displayBloomProgram:new t(i.baseVertex,i.displayBloom,r),displayShadingProgram:new t(i.baseVertex,i.displayShading,r),displayBloomShadingProgram:new t(i.baseVertex,i.displayBloomShading,r),bloomPreFilterProgram:new t(i.baseVertex,i.bloomPreFilter,r),bloomBlurProgram:new t(i.baseVertex,i.bloomBlur,r),bloomFinalProgram:new t(i.baseVertex,i.bloomFinal,r),splatProgram:new t(i.baseVertex,i.splat,r),advectionProgram:new t(i.baseVertex,o?i.advection:i.advectionManualFiltering,r),divergenceProgram:new t(i.baseVertex,i.divergence,r),curlProgram:new t(i.baseVertex,i.curl,r),vorticityProgram:new t(i.baseVertex,i.vorticity,r),pressureProgram:new t(i.baseVertex,i.pressure,r),gradientSubtractProgram:new t(i.baseVertex,i.gradientSubtract,r)}),this.webGL=r}activate(){(this.deactivated.is||this.activated.is)&&this.initWebGL(),this.activated.is=!0;const e=this.deactivated,r=this.canvas,n=this.webGL,t=this.PARAMS,i=this.colorFormats,o=this.programs;let a,u,l,s,c,m,v,f,g,d,h=this.pointers,p=[],x=[];const R=(()=>(n.bindBuffer(n.ARRAY_BUFFER,n.createBuffer()),n.bufferData(n.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),n.STATIC_DRAW),n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,n.createBuffer()),n.bufferData(n.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,0,2,3]),n.STATIC_DRAW),n.vertexAttribPointer(0,2,n.FLOAT,!1,0,0),n.enableVertexAttribArray(0),e=>{n.bindFramebuffer(n.FRAMEBUFFER,e),n.drawElements(n.TRIANGLES,6,n.UNSIGNED_SHORT,0)}))();let b=function(e){let r=n.createTexture();n.bindTexture(n.TEXTURE_2D,r),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.LINEAR),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.LINEAR),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.REPEAT),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.REPEAT),n.texImage2D(n.TEXTURE_2D,0,n.RGB,1,1,0,n.RGB,n.UNSIGNED_BYTE,new Uint8Array([255,255,255]));let t={texture:r,width:1,height:1,attach:e=>(n.activeTexture(n.TEXTURE0+e),n.bindTexture(n.TEXTURE_2D,r),e)},i=new Image;return i.onload=()=>{t.width=i.width,t.height=i.height,n.bindTexture(n.TEXTURE_2D,r),n.texImage2D(n.TEXTURE_2D,0,n.RGB,n.RGB,n.UNSIGNED_BYTE,i)},i.src=e,t}(\"src/dither.png\");T(),A(parseInt(20*Math.random()));let E=Date.now();function T(){const e=i.halfFloatTexType,r=i.formatRGBA,o=i.formatRG,h=i.formatR,x=i.supportLinearFiltering?n.LINEAR:n.NEAREST;let R=F(t.sim_resolution),b=F(t.dye_resolution),E=F(t.bloom_resolution);a=R.width,u=R.height,l=b.width,s=b.height,c=c?_(c,l,s,r.internalFormat,r.format,e,x):y(l,s,r.internalFormat,r.format,e,x),m=m?_(m,a,u,o.internalFormat,o.format,e,x):y(a,u,o.internalFormat,o.format,e,x),d=D(E.width,E.height,r.internalFormat,r.format,e,x),v=D(a,u,h.internalFormat,h.format,e,n.NEAREST),f=D(a,u,h.internalFormat,h.format,e,n.NEAREST),g=y(a,u,h.internalFormat,h.format,e,n.NEAREST),p.length=0;for(let n=0;n<t.bloom_iterations;n++){let t=E.width>>n+1,i=E.height>>n+1;if(t<2||i<2)break;let o=D(t,i,r.internalFormat,r.format,e,x);p.push(o)}}function y(e,r,n,t,i,o){let a=D(e,r,n,t,i,o),u=D(e,r,n,t,i,o);return{get read(){return a},set read(e){a=e},get write(){return u},set write(e){u=e},swap(){let e=a;a=u,u=e}}}function D(e,r,t,i,o,a){n.activeTexture(n.TEXTURE0);let u=n.createTexture();n.bindTexture(n.TEXTURE_2D,u),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,a),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,a),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texImage2D(n.TEXTURE_2D,0,t,e,r,0,i,o,null);let l=n.createFramebuffer();return n.bindFramebuffer(n.FRAMEBUFFER,l),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,u,0),n.viewport(0,0,e,r),n.clear(n.COLOR_BUFFER_BIT),{texture:u,fbo:l,width:e,height:r,attach:e=>(n.activeTexture(n.TEXTURE0+e),n.bindTexture(n.TEXTURE_2D,u),e)}}function _(e,r,t,i,a,u,l){return e.read=function(e,r,t,i,a,u,l){let s=D(r,t,i,a,u,l);return o.clearProgram.bind(),n.uniform1i(o.clearProgram.uniforms.uTexture,e.attach(0)),n.uniform1f(o.clearProgram.uniforms.value,1),R(s.fbo),s}(e.read,r,t,i,a,u,l),e.write=D(r,t,i,a,u,l),e}function S(e,i,v,f,g){n.viewport(0,0,a,u),o.splatProgram.bind(),n.uniform1i(o.splatProgram.uniforms.uTarget,m.read.attach(0)),n.uniform1f(o.splatProgram.uniforms.aspectRatio,r.width/r.height),n.uniform2f(o.splatProgram.uniforms.point,e/r.width,1-i/r.height),n.uniform3f(o.splatProgram.uniforms.color,v,-f,1),n.uniform1f(o.splatProgram.uniforms.radius,t.emitter_size/100),R(m.write.fbo),m.swap(),n.viewport(0,0,l,s),n.uniform1i(o.splatProgram.uniforms.uTarget,c.read.attach(0)),n.uniform3f(o.splatProgram.uniforms.color,g.r,g.g,g.b),R(c.write.fbo),c.swap()}function A(e){S(500,500,100,0,{r:255,b:0,g:0})}function P(){let e=function(e,r,n){let t,i,o,a,u,l,s,c;switch(a=Math.floor(6*e),l=n*(1-r),s=n*(1-(u=6*e-a)*r),c=n*(1-(1-u)*r),a%6){case 0:t=n,i=c,o=l;break;case 1:t=s,i=n,o=l;break;case 2:t=l,i=n,o=c;break;case 3:t=l,i=s,o=n;break;case 4:t=c,i=l,o=n;break;case 5:t=n,i=l,o=s}return{r:t,g:i,b:o}}(Math.random(),1,1);return e.r*=.15,e.g*=.15,e.b*=.15,e}function F(e){let r=n.drawingBufferWidth/n.drawingBufferHeight;r<1&&(r=1/r);let t=Math.round(e*r),i=Math.round(e);return n.drawingBufferWidth>n.drawingBufferHeight?{width:t,height:i}:{width:i,height:t}}function U(e,r,n){return{x:r/e.width,y:n/e.height}}!function y(){r.width==r.clientWidth&&r.height==r.clientHeight||(r.width=r.clientWidth,r.height=r.clientHeight,T()),function(){x.length>0&&A(x.pop());for(let e=0;e<h.length;e++){const r=h[e];r.moved&&(S(r.x,r.y,r.dx,r.dy,r.color),1!==e&&(r.moved=!1))}if(t.multi_color&&E+100<Date.now()){E=Date.now();for(let e=0;e<h.length;e++){const r=h[e];r.color=P()}}}(),t.paused||function(e){n.disable(n.BLEND),n.viewport(0,0,a,u),o.curlProgram.bind(),n.uniform2f(o.curlProgram.uniforms.texelSize,1/a,1/u),n.uniform1i(o.curlProgram.uniforms.uVelocity,m.read.attach(0)),R(f.fbo),o.vorticityProgram.bind(),n.uniform2f(o.vorticityProgram.uniforms.texelSize,1/a,1/u),n.uniform1i(o.vorticityProgram.uniforms.uVelocity,m.read.attach(0)),n.uniform1i(o.vorticityProgram.uniforms.uCurl,f.attach(1)),n.uniform1f(o.vorticityProgram.uniforms.curl,t.curl),n.uniform1f(o.vorticityProgram.uniforms.dt,e),R(m.write.fbo),m.swap(),o.divergenceProgram.bind(),n.uniform2f(o.divergenceProgram.uniforms.texelSize,1/a,1/u),n.uniform1i(o.divergenceProgram.uniforms.uVelocity,m.read.attach(0)),R(v.fbo),o.clearProgram.bind(),n.uniform1i(o.clearProgram.uniforms.uTexture,g.read.attach(0)),n.uniform1f(o.clearProgram.uniforms.value,t.pressure),R(g.write.fbo),g.swap(),o.pressureProgram.bind(),n.uniform2f(o.pressureProgram.uniforms.texelSize,1/a,1/u),n.uniform1i(o.pressureProgram.uniforms.uDivergence,v.attach(0));for(let e=0;e<t.pressure_iteration;e++)n.uniform1i(o.pressureProgram.uniforms.uPressure,g.read.attach(1)),R(g.write.fbo),g.swap();o.gradientSubtractProgram.bind(),n.uniform2f(o.gradientSubtractProgram.uniforms.texelSize,1/a,1/u),n.uniform1i(o.gradientSubtractProgram.uniforms.uPressure,g.read.attach(0)),n.uniform1i(o.gradientSubtractProgram.uniforms.uVelocity,m.read.attach(1)),R(m.write.fbo),m.swap(),o.advectionProgram.bind(),n.uniform2f(o.advectionProgram.uniforms.texelSize,1/a,1/u),i.supportLinearFiltering||n.uniform2f(o.advectionProgram.uniforms.dyeTexelSize,1/a,1/u);let r=m.read.attach(0);n.uniform1i(o.advectionProgram.uniforms.uVelocity,r),n.uniform1i(o.advectionProgram.uniforms.uSource,r),n.uniform1f(o.advectionProgram.uniforms.dt,e),n.uniform1f(o.advectionProgram.uniforms.dissipation,t.velocity),R(m.write.fbo),m.swap(),n.viewport(0,0,l,s),i.supportLinearFiltering||n.uniform2f(o.advectionProgram.uniforms.dyeTexelSize,1/l,1/s),n.uniform1i(o.advectionProgram.uniforms.uVelocity,m.read.attach(0)),n.uniform1i(o.advectionProgram.uniforms.uSource,c.read.attach(1)),n.uniform1f(o.advectionProgram.uniforms.dissipation,t.dissipation),R(c.write.fbo),c.swap()}(.02),function(e){t.render_bloom&&function(e,r){if(p.length<2)return;let i=r;n.disable(n.BLEND),o.bloomPreFilterProgram.bind();let a=t.threshold*t.soft_knee+1e-4,u=t.threshold-a,l=2*a,s=.25/a;n.uniform3f(o.bloomPreFilterProgram.uniforms.curve,u,l,s),n.uniform1f(o.bloomPreFilterProgram.uniforms.threshold,t.threshold),n.uniform1i(o.bloomPreFilterProgram.uniforms.uTexture,e.attach(0)),n.viewport(0,0,i.width,i.height),R(i.fbo),o.bloomBlurProgram.bind();for(let e=0;e<p.length;e++){let r=p[e];n.uniform2f(o.bloomBlurProgram.uniforms.texelSize,1/i.width,1/i.height),n.uniform1i(o.bloomBlurProgram.uniforms.uTexture,i.attach(0)),n.viewport(0,0,r.width,r.height),R(r.fbo),i=r}n.blendFunc(n.ONE,n.ONE),n.enable(n.BLEND);for(let e=p.length-2;e>=0;e--){let r=p[e];n.uniform2f(o.bloomBlurProgram.uniforms.texelSize,1/i.width,1/i.height),n.uniform1i(o.bloomBlurProgram.uniforms.uTexture,i.attach(0)),n.viewport(0,0,r.width,r.height),R(r.fbo),i=r}n.disable(n.BLEND),o.bloomFinalProgram.bind(),n.uniform2f(o.bloomFinalProgram.uniforms.texelSize,1/i.width,1/i.height),n.uniform1i(o.bloomFinalProgram.uniforms.uTexture,i.attach(0)),n.uniform1f(o.bloomFinalProgram.uniforms.intensity,t.intensity),n.viewport(0,0,r.width,r.height),R(r.fbo)}(c.read,d),null!=e&&t.transparent?n.disable(n.BLEND):(n.blendFunc(n.ONE,n.ONE_MINUS_SRC_ALPHA),n.enable(n.BLEND));let i=null==e?n.drawingBufferWidth:l,a=null==e?n.drawingBufferHeight:s;if(n.viewport(0,0,i,a),!t.transparent){o.colorProgram.bind();let r=t.background_color;n.uniform4f(o.colorProgram.uniforms.color,r.r/255,r.g/255,r.b/255,1),R(e)}if(null==e&&t.transparent&&(o.backgroundProgram.bind(),n.uniform1f(o.backgroundProgram.uniforms.aspectRatio,r.width/r.height),R(null)),t.render_shaders){let e=t.render_bloom?o.displayBloomShadingProgram:o.displayShadingProgram;if(e.bind(),n.uniform2f(e.uniforms.texelSize,1/i,1/a),n.uniform1i(e.uniforms.uTexture,c.read.attach(0)),t.render_bloom){n.uniform1i(e.uniforms.uBloom,d.attach(1)),n.uniform1i(e.uniforms.uDithering,b.attach(2));let r=U(b,i,a);n.uniform2f(e.uniforms.ditherScale,r.x,r.y)}}else{let e=t.render_bloom?o.displayBloomProgram:o.displayProgram;if(e.bind(),n.uniform1i(e.uniforms.uTexture,c.read.attach(0)),t.render_bloom){n.uniform1i(e.uniforms.uBloom,d.attach(1)),n.uniform1i(e.uniforms.uDithering,b.attach(2));let r=U(b,i,a);n.uniform2f(e.uniforms.ditherScale,r.x,r.y)}}R(e)}(null);let D=requestAnimationFrame(y);e.is&&(n.clear(n.COLOR_BUFFER_BIT),cancelAnimationFrame(D))}(),r.addEventListener(\"mousemove\",e=>{h[0].moved=h[0].down,h[0].dx=5*(e.offsetX-h[0].x),h[0].dy=5*(e.offsetY-h[0].y),h[0].x=e.offsetX,h[0].y=e.offsetY}),r.addEventListener(\"mousedown\",()=>{h[0].down=!0,h[0].color=P()}),window.addEventListener(\"mouseup\",()=>{h[0].down=!1}),window.addEventListener(\"keydown\",e=>{\"KeyP\"===e.code&&(t.paused=!t.paused),\" \"===e.key&&x.push(parseInt(20*Math.random())+5)})}deactivate(){this.deactivated.is=!0}reset(){this.initWebGL(),this.activate()}mapBehaviors(e){this.PARAMS={...this.PARAMS,...e}}setAsBackground(e=!0){canvas.style.zIndex=e?\"-99\":\"0\",canvas.style.position=e?\"absolute\":\"relative\"}applyBackground(e,r,n=null){switch(e=e.toLowerCase(),this.PARAMS.transparent=!0,e){case\"gradient\":!function(){let e=\"\";switch(n){case\"radial\":e=\"radial-gradient(\"+r+\")\";break;case\"conic\":e=\"conic-gradient(\"+r+\")\";break;case\"repeating-linear\":e=\"repeating-linear-gradient(\"+r+\")\";break;case\"repeating-radial\":e=\"repeating-radial-gradient(\"+r+\")\";break;case\"linear\":default:e=\"linear-gradient(\"+r+\")\"}canvas.style.backgroundImage=e}();break;case\"image\":canvas.style.backgroundImage=\"url('\"+r+\"')\",n&&(canvas.style.backgroundRepeat=n.repeat?\"repeat\":\"no-repeat\",canvas.style.backgroundPosition=n.position?n.position:\"center\",canvas.style.backgroundSize=n.size?n.size:\"contain\",canvas.style.backgroundColor=n.color?n.color:\"none\");break;case\"solid\":default:this.PARAMS.transparent=!1,this.PARAMS.background_color=r}this.reset()}}}.call(this,\"/\",n(1)(e))},function(e,r){e.exports=function(e){if(!e.webpackPolyfill){var r=Object.create(e);r.children||(r.children=[]),Object.defineProperty(r,\"loaded\",{enumerable:!0,get:function(){return r.l}}),Object.defineProperty(r,\"id\",{enumerable:!0,get:function(){return r.i}}),Object.defineProperty(r,\"exports\",{enumerable:!0}),r.webpackPolyfill=1}return r}}]);","extractedComments":[]}