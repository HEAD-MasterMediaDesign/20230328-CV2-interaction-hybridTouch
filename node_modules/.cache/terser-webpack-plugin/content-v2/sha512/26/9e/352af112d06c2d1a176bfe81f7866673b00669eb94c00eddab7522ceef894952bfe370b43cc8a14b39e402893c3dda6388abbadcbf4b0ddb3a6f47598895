{"code":"!function(e){var r={};function n(t){if(r[t])return r[t].exports;var i=r[t]={i:t,l:!1,exports:{}};return e[t].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=r,n.d=function(e,r,t){n.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,r){if(1&r&&(e=n(e)),8&r)return e;if(4&r&&\"object\"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,\"default\",{enumerable:!0,value:e}),2&r&&\"string\"!=typeof e)for(var i in e)n.d(t,i,function(r){return e[r]}.bind(null,i));return t},n.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(r,\"a\",r),r},n.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},n.p=\"\",n(n.s=0)}([function(e,r,n){\"use strict\";function t(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),n.push.apply(n,t)}return n}function i(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){if(!(e instanceof r))throw new TypeError(\"Cannot call a class as a function\")}function a(e,r){for(var n=0;n<r.length;n++){var t=r[n];t.enumerable=t.enumerable||!1,t.configurable=!0,\"value\"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function u(e,r,n){return r&&a(e.prototype,r),n&&a(e,n),e}var l=function(){function e(r){o(this,e),this.deactivated={is:!1},this.activated={is:!1},this.PARAMS={sim_resolution:128,dye_resolution:512,paused:!1,clamp_values:!0,dissipation:.99,velocity:.99,pressure:1,pressure_iteration:10,fluid_color:[[0,0,0],[.4,.2,0]],curl:0,emitter_size:.5,render_shaders:!0,multi_color:!0,render_bloom:!1,bloom_resolution:1024,bloom_iterations:1,intensity:.6,threshold:.3,soft_knee:1,background_color:{r:20,g:20,b:20},transparent:!1},this.DRAWING_PARAMS={alpha:!0,depth:!1,stencil:!1,antialias:!1,preserveDrawingBuffer:!1,powerPreference:\"default\"},this.SHADER_SOURCE={blank:\"\",vertex:\"\\n                  precision highp float;\\n              \\n                  attribute vec2 aPosition;\\n                  varying vec2 vUv;\\n                  varying vec2 vL;\\n                  varying vec2 vR;\\n                  varying vec2 vT;\\n                  varying vec2 vB;\\n                  uniform vec2 texelSize;\\n              \\n                  void main () {\\n                      vUv = aPosition * 0.5 + 0.5;\\n                      vL = vUv - vec2(texelSize.x, 0.0);\\n                      vR = vUv + vec2(texelSize.x, 0.0);\\n                      vT = vUv + vec2(0.0, texelSize.y);\\n                      vB = vUv - vec2(0.0, texelSize.y);\\n                      gl_Position = vec4(aPosition, 0.0, 1.0);\\n                  }\",clear:\"\\n                  precision mediump float;\\n                  precision mediump sampler2D;\\n              \\n                  varying highp vec2 vUv;\\n                  uniform sampler2D uTexture;\\n                  uniform float value;\\n              \\n                  void main () {\\n                      gl_FragColor = value * texture2D(uTexture, vUv);\\n                  }\\n              \",color:\"\\n                  precision mediump float;\\n              \\n                  uniform vec4 color;\\n              \\n                  void main () {\\n                      gl_FragColor = color;\\n                  }\\n              \",background:\"\\n                  precision highp float;\\n                  precision highp sampler2D;\\n              \\n                  varying vec2 vUv;\\n                  uniform sampler2D uTexture;\\n                  uniform float aspectRatio;\\n              \\n                  #define SCALE 25.0\\n              \\n                  void main () {\\n                      vec2 uv = floor(vUv * SCALE * vec2(aspectRatio, 1.0));\\n                      float v = mod(uv.x + uv.y, 2.0);\\n                      v = v * 0.1 + 0.8;\\n                      gl_FragColor = vec4(vec3(v), 1.0);\\n                  }\\n              \",pictureBackground:\" \\n                    void main() { \\n                        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0); \\n                    } \\n            \",display:\"\\n                  precision highp float;\\n                  precision highp sampler2D;\\n              \\n                  varying vec2 vUv;\\n                  uniform sampler2D uTexture;\\n              \\n                  void main () {\\n                      vec3 C = texture2D(uTexture, vUv).rgb;\\n                      float a = max(C.r, max(C.g, C.b));\\n                      gl_FragColor = vec4(C, a);\\n                  }\\n              \",displayBloom:\"\\n          precision highp float;\\n          precision highp sampler2D;\\n      \\n          varying vec2 vUv;\\n          uniform sampler2D uTexture;\\n          uniform sampler2D uBloom;\\n          uniform sampler2D uDithering;\\n          uniform vec2 ditherScale;\\n      \\n          void main () {\\n              vec3 C = texture2D(uTexture, vUv).rgb;\\n              vec3 bloom = texture2D(uBloom, vUv).rgb;\\n              vec3 noise = texture2D(uDithering, vUv * ditherScale).rgb;\\n              noise = noise * 2.0 - 1.0;\\n              bloom += noise / 800.0;\\n              bloom = pow(bloom.rgb, vec3(1.0 / 2.2));\\n              C += bloom;\\n              float a = max(C.r, max(C.g, C.b));\\n              gl_FragColor = vec4(C, a);\\n          }\\n      \",displayShading:\"\\n          precision highp float;\\n          precision highp sampler2D;\\n      \\n          varying vec2 vUv;\\n          varying vec2 vL;\\n          varying vec2 vR;\\n          varying vec2 vT;\\n          varying vec2 vB;\\n          uniform sampler2D uTexture;\\n          uniform vec2 texelSize;\\n      \\n          void main () {\\n              vec3 L = texture2D(uTexture, vL).rgb;\\n              vec3 R = texture2D(uTexture, vR).rgb;\\n              vec3 T = texture2D(uTexture, vT).rgb;\\n              vec3 B = texture2D(uTexture, vB).rgb;\\n              vec3 C = texture2D(uTexture, vUv).rgb;\\n      \\n              float dx = length(R) - length(L);\\n              float dy = length(T) - length(B);\\n      \\n              vec3 n = normalize(vec3(dx, dy, length(texelSize)));\\n              vec3 l = vec3(0.0, 0.0, 1.0);\\n      \\n              float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\\n              C.rgb *= diffuse;\\n      \\n              float a = max(C.r, max(C.g, C.b));\\n              gl_FragColor = vec4(C, a);\\n          }\\n      \",displayBloomShading:\"\\n          precision highp float;\\n          precision highp sampler2D;\\n      \\n          varying vec2 vUv;\\n          varying vec2 vL;\\n          varying vec2 vR;\\n          varying vec2 vT;\\n          varying vec2 vB;\\n          uniform sampler2D uTexture;\\n          uniform sampler2D uBloom;\\n          uniform sampler2D uDithering;\\n          uniform vec2 ditherScale;\\n          uniform vec2 texelSize;\\n      \\n          void main () {\\n              vec3 L = texture2D(uTexture, vL).rgb;\\n              vec3 R = texture2D(uTexture, vR).rgb;\\n              vec3 T = texture2D(uTexture, vT).rgb;\\n              vec3 B = texture2D(uTexture, vB).rgb;\\n              vec3 C = texture2D(uTexture, vUv).rgb;\\n      \\n              float dx = length(R) - length(L);\\n              float dy = length(T) - length(B);\\n      \\n              vec3 n = normalize(vec3(dx, dy, length(texelSize)));\\n              vec3 l = vec3(0.0, 0.0, 1.0);\\n      \\n              float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\\n              C *= diffuse;\\n      \\n              vec3 bloom = texture2D(uBloom, vUv).rgb;\\n              vec3 noise = texture2D(uDithering, vUv * ditherScale).rgb;\\n              noise = noise * 2.0 - 1.0;\\n              bloom += noise / 800.0;\\n              bloom = pow(bloom.rgb, vec3(1.0 / 2.2));\\n              C += bloom;\\n      \\n              float a = max(C.r, max(C.g, C.b));\\n              gl_FragColor = vec4(C, a);\\n          }\\n      \",bloomPreFilter:\"\\n          precision mediump float;\\n          precision mediump sampler2D;\\n      \\n          varying vec2 vUv;\\n          uniform sampler2D uTexture;\\n          uniform vec3 curve;\\n          uniform float threshold;\\n      \\n          void main () {\\n              vec3 c = texture2D(uTexture, vUv).rgb;\\n              float br = max(c.r, max(c.g, c.b));\\n              float rq = clamp(br - curve.x, 0.0, curve.y);\\n              rq = curve.z * rq * rq;\\n              c *= max(rq, br - threshold) / max(br, 0.0001);\\n              gl_FragColor = vec4(c, 0.0);\\n          }\\n      \",bloomBlur:\"\\n          precision mediump float;\\n          precision mediump sampler2D;\\n      \\n          varying vec2 vL;\\n          varying vec2 vR;\\n          varying vec2 vT;\\n          varying vec2 vB;\\n          uniform sampler2D uTexture;\\n      \\n          void main () {\\n              vec4 sum = vec4(0.0);\\n              sum += texture2D(uTexture, vL);\\n              sum += texture2D(uTexture, vR);\\n              sum += texture2D(uTexture, vT);\\n              sum += texture2D(uTexture, vB);\\n              sum *= 0.25;\\n              gl_FragColor = sum;\\n          }\\n      \",bloomFinal:\"\\n          precision mediump float;\\n          precision mediump sampler2D;\\n      \\n          varying vec2 vL;\\n          varying vec2 vR;\\n          varying vec2 vT;\\n          varying vec2 vB;\\n          uniform sampler2D uTexture;\\n          uniform float intensity;\\n      \\n          void main () {\\n              vec4 sum = vec4(0.0);\\n              sum += texture2D(uTexture, vL);\\n              sum += texture2D(uTexture, vR);\\n              sum += texture2D(uTexture, vT);\\n              sum += texture2D(uTexture, vB);\\n              sum *= 0.25;\\n              gl_FragColor = sum * intensity;\\n          }\\n      \",splat:\"\\n          precision highp float;\\n          precision highp sampler2D;\\n      \\n          varying vec2 vUv;\\n          uniform sampler2D uTarget;\\n          uniform float aspectRatio;\\n          uniform vec3 color;\\n          uniform vec2 point;\\n          uniform float radius;\\n      \\n          void main () {\\n              vec2 p = vUv - point.xy;\\n              p.x *= aspectRatio;\\n              vec3 splat = exp(-dot(p, p) / radius) * color;\\n              vec3 base = texture2D(uTarget, vUv).xyz;\\n              gl_FragColor = vec4(base + splat, 1.0);\\n          }\\n      \",advectionManualFiltering:\"\\n          precision highp float;\\n          precision highp sampler2D;\\n      \\n          varying vec2 vUv;\\n          uniform sampler2D uVelocity;\\n          uniform sampler2D uSource;\\n          uniform vec2 texelSize;\\n          uniform vec2 dyeTexelSize;\\n          uniform float dt;\\n          uniform float dissipation;\\n      \\n          vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\\n              vec2 st = uv / tsize - 0.5;\\n      \\n              vec2 iuv = floor(st);\\n              vec2 fuv = fract(st);\\n      \\n              vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\\n              vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\\n              vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\\n              vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\\n      \\n              return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\\n          }\\n      \\n          void main () {\\n              vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\\n              gl_FragColor = dissipation * bilerp(uSource, coord, dyeTexelSize);\\n              gl_FragColor.a = 1.0;\\n          }\\n      \",advection:\"\\n          precision highp float;\\n          precision highp sampler2D;\\n      \\n          varying vec2 vUv;\\n          uniform sampler2D uVelocity;\\n          uniform sampler2D uSource;\\n          uniform vec2 texelSize;\\n          uniform float dt;\\n          uniform float dissipation;\\n      \\n          void main () {\\n              vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\\n              gl_FragColor = dissipation * texture2D(uSource, coord);\\n              gl_FragColor.a = 1.0;\\n          }\\n      \",divergence:\"\\n          precision mediump float;\\n          precision mediump sampler2D;\\n      \\n          varying highp vec2 vUv;\\n          varying highp vec2 vL;\\n          varying highp vec2 vR;\\n          varying highp vec2 vT;\\n          varying highp vec2 vB;\\n          uniform sampler2D uVelocity;\\n      \\n          void main () {\\n              float L = texture2D(uVelocity, vL).x;\\n              float R = texture2D(uVelocity, vR).x;\\n              float T = texture2D(uVelocity, vT).y;\\n              float B = texture2D(uVelocity, vB).y;\\n      \\n              vec2 C = texture2D(uVelocity, vUv).xy;\\n              if (vL.x < 0.0) { L = -C.x; }\\n              if (vR.x > 1.0) { R = -C.x; }\\n              if (vT.y > 1.0) { T = -C.y; }\\n              if (vB.y < 0.0) { B = -C.y; }\\n      \\n              float div = 0.5 * (R - L + T - B);\\n              gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\\n          }\\n      \",curl:\"\\n          precision mediump float;\\n          precision mediump sampler2D;\\n      \\n          varying highp vec2 vUv;\\n          varying highp vec2 vL;\\n          varying highp vec2 vR;\\n          varying highp vec2 vT;\\n          varying highp vec2 vB;\\n          uniform sampler2D uVelocity;\\n      \\n          void main () {\\n              float L = texture2D(uVelocity, vL).y;\\n              float R = texture2D(uVelocity, vR).y;\\n              float T = texture2D(uVelocity, vT).x;\\n              float B = texture2D(uVelocity, vB).x;\\n              float vorticity = R - L - T + B;\\n              gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\\n          }\\n      \",vorticity:\"\\n          precision highp float;\\n          precision highp sampler2D;\\n      \\n          varying vec2 vUv;\\n          varying vec2 vL;\\n          varying vec2 vR;\\n          varying vec2 vT;\\n          varying vec2 vB;\\n          uniform sampler2D uVelocity;\\n          uniform sampler2D uCurl;\\n          uniform float curl;\\n          uniform float dt;\\n      \\n          void main () {\\n              float L = texture2D(uCurl, vL).x;\\n              float R = texture2D(uCurl, vR).x;\\n              float T = texture2D(uCurl, vT).x;\\n              float B = texture2D(uCurl, vB).x;\\n              float C = texture2D(uCurl, vUv).x;\\n      \\n              vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\\n              force /= length(force) + 0.0001;\\n              force *= curl * C;\\n              force.y *= -1.0;\\n      \\n              vec2 vel = texture2D(uVelocity, vUv).xy;\\n              gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\\n          }\\n      \",pressure:\"\\n          precision mediump float;\\n          precision mediump sampler2D;\\n      \\n          varying highp vec2 vUv;\\n          varying highp vec2 vL;\\n          varying highp vec2 vR;\\n          varying highp vec2 vT;\\n          varying highp vec2 vB;\\n          uniform sampler2D uPressure;\\n          uniform sampler2D uDivergence;\\n      \\n          vec2 boundary (vec2 uv) {\\n              return uv;\\n              // uncomment if you use wrap or repeat texture mode\\n              // uv = min(max(uv, 0.0), 1.0);\\n              // return uv;\\n          }\\n      \\n          void main () {\\n              float L = texture2D(uPressure, boundary(vL)).x;\\n              float R = texture2D(uPressure, boundary(vR)).x;\\n              float T = texture2D(uPressure, boundary(vT)).x;\\n              float B = texture2D(uPressure, boundary(vB)).x;\\n              float C = texture2D(uPressure, vUv).x;\\n              float divergence = texture2D(uDivergence, vUv).x;\\n              float pressure = (L + R + B + T - divergence) * 0.25;\\n              gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\\n          }\\n      \",gradientSubtract:\"\\n          precision mediump float;\\n          precision mediump sampler2D;\\n      \\n          varying highp vec2 vUv;\\n          varying highp vec2 vL;\\n          varying highp vec2 vR;\\n          varying highp vec2 vT;\\n          varying highp vec2 vB;\\n          uniform sampler2D uPressure;\\n          uniform sampler2D uVelocity;\\n      \\n          vec2 boundary (vec2 uv) {\\n              return uv;\\n              // uv = min(max(uv, 0.0), 1.0);\\n              // return uv;\\n          }\\n      \\n          void main () {\\n              float L = texture2D(uPressure, boundary(vL)).x;\\n              float R = texture2D(uPressure, boundary(vR)).x;\\n              float T = texture2D(uPressure, boundary(vT)).x;\\n              float B = texture2D(uPressure, boundary(vB)).x;\\n              vec2 velocity = texture2D(uVelocity, vUv).xy;\\n              velocity.xy -= vec2(R - L, T - B);\\n              gl_FragColor = vec4(velocity, 0.0, 1.0);\\n          }\\n      \"},r.width=r.clientWidth,r.height=r.clientHeight,this.canvas=r,this.initWebGL()}return u(e,[{key:\"initWebGL\",value:function(){this.deactivated.is=!1;var e=[];e.push(new function(){this.id=-1,this.x=0,this.y=0,this.dx=0,this.dy=0,this.down=!1,this.moved=!1,this.color=[30,0,300]}),this.pointers=e;var r=canvas.getContext(\"webgl2\",this.DRAWING_PARAMS),n=!!r;n||(r=canvas.getContext(\"webgl\",this.DRAWING_PARAMS)||canvas.getContext(\"experimental-webgl\",this.DRAWING_PARAMS)),this.colorFormats=function(){var e,t,i,o,a;n?(r.getExtension(\"EXT_color_buffer_float\"),a=r.getExtension(\"OES_texture_float_linear\")):(o=r.getExtension(\"OES_texture_half_float\"),a=r.getExtension(\"OES_texture_half_float_linear\"));var u=n?r.HALF_FLOAT:o.HALF_FLOAT_OES;r.clearColor(0,0,0,1),n?(e=l(r.RGBA16F,r.RGBA,u),t=l(r.RG16F,r.RG,u),i=l(r.R16F,r.RED,u)):(e=l(r.RGBA,r.RGBA,u),t=l(r.RGBA,r.RGBA,u),i=l(r.RGBA,r.RGBA,u));function l(e,n,t){var i=r.createTexture();r.bindTexture(r.TEXTURE_2D,i),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.texImage2D(r.TEXTURE_2D,0,e,4,4,0,n,t,null);var o=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,o),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,i,0);var a=r.checkFramebufferStatus(r.FRAMEBUFFER);if(!(a===r.FRAMEBUFFER_COMPLETE))switch(e){case r.R16F:return l(r.RG16F,r.RG,t);case r.RG16F:return l(r.RGBA16F,r.RGBA,t);default:return null}return{internalFormat:e,format:n}}return{formatRGBA:e,formatRG:t,formatR:i,halfFloatTexType:u,supportLinearFiltering:a}}(),/Mobi|Android/i.test(navigator.userAgent)&&(this.PARAMS.render_shaders=!1),this.colorFormats.supportLinearFiltering||(this.PARAMS.render_shaders=!1,this.PARAMS.render_bloom=!1);var t,i={baseVertex:o(r.VERTEX_SHADER,this.SHADER_SOURCE.vertex),clear:o(r.FRAGMENT_SHADER,this.SHADER_SOURCE.clear),color:o(r.FRAGMENT_SHADER,this.SHADER_SOURCE.color),background:o(r.FRAGMENT_SHADER,this.PARAMS.transparent?this.SHADER_SOURCE.pictureBackground:this.SHADER_SOURCE.background),display:o(r.FRAGMENT_SHADER,this.SHADER_SOURCE.display),displayBloom:o(r.FRAGMENT_SHADER,this.SHADER_SOURCE.displayBloom),displayShading:o(r.FRAGMENT_SHADER,this.SHADER_SOURCE.displayShading),displayBloomShading:o(r.FRAGMENT_SHADER,this.SHADER_SOURCE.displayBloomShading),bloomPreFilter:o(r.FRAGMENT_SHADER,this.SHADER_SOURCE.bloomPreFilter),bloomBlur:o(r.FRAGMENT_SHADER,this.SHADER_SOURCE.bloomBlur),bloomFinal:o(r.FRAGMENT_SHADER,this.SHADER_SOURCE.bloomFinal),splat:o(r.FRAGMENT_SHADER,this.SHADER_SOURCE.splat),advectionManualFiltering:o(r.FRAGMENT_SHADER,this.SHADER_SOURCE.advectionManualFiltering),advection:o(r.FRAGMENT_SHADER,this.SHADER_SOURCE.advection),divergence:o(r.FRAGMENT_SHADER,this.SHADER_SOURCE.divergence),curl:o(r.FRAGMENT_SHADER,this.SHADER_SOURCE.curl),vorticity:o(r.FRAGMENT_SHADER,this.SHADER_SOURCE.vorticity),pressure:o(r.FRAGMENT_SHADER,this.SHADER_SOURCE.pressure),gradientSubtract:o(r.FRAGMENT_SHADER,this.SHADER_SOURCE.gradientSubtract)};function o(e,n){var t=r.createShader(e);if(r.shaderSource(t,n),r.compileShader(t),!r.getShaderParameter(t,r.COMPILE_STATUS))throw r.getShaderInfoLog(t);return t}this.programs=(t=this.colorFormats.supportLinearFiltering,{clearProgram:new v(i.baseVertex,i.clear,r),colorProgram:new v(i.baseVertex,i.color,r),backgroundProgram:new v(i.baseVertex,i.background,r),displayProgram:new v(i.baseVertex,i.display,r),displayBloomProgram:new v(i.baseVertex,i.displayBloom,r),displayShadingProgram:new v(i.baseVertex,i.displayShading,r),displayBloomShadingProgram:new v(i.baseVertex,i.displayBloomShading,r),bloomPreFilterProgram:new v(i.baseVertex,i.bloomPreFilter,r),bloomBlurProgram:new v(i.baseVertex,i.bloomBlur,r),bloomFinalProgram:new v(i.baseVertex,i.bloomFinal,r),splatProgram:new v(i.baseVertex,i.splat,r),advectionProgram:new v(i.baseVertex,t?i.advection:i.advectionManualFiltering,r),divergenceProgram:new v(i.baseVertex,i.divergence,r),curlProgram:new v(i.baseVertex,i.curl,r),vorticityProgram:new v(i.baseVertex,i.vorticity,r),pressureProgram:new v(i.baseVertex,i.pressure,r),gradientSubtractProgram:new v(i.baseVertex,i.gradientSubtract,r)}),this.webGL=r}},{key:\"activate\",value:function(){(this.deactivated.is||this.activated.is)&&this.initWebGL(),this.activated.is=!0;var e,r,n,t,i,o,a,u,l,v,s=this.deactivated,c=this.canvas,m=this.webGL,f=this.PARAMS,g=this.colorFormats,d=this.programs,h=this.pointers,p=[],b=[],x=(m.bindBuffer(m.ARRAY_BUFFER,m.createBuffer()),m.bufferData(m.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),m.STATIC_DRAW),m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,m.createBuffer()),m.bufferData(m.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,0,2,3]),m.STATIC_DRAW),m.vertexAttribPointer(0,2,m.FLOAT,!1,0,0),m.enableVertexAttribArray(0),function(e){m.bindFramebuffer(m.FRAMEBUFFER,e),m.drawElements(m.TRIANGLES,6,m.UNSIGNED_SHORT,0)}),R=function(e){var r=m.createTexture();m.bindTexture(m.TEXTURE_2D,r),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MIN_FILTER,m.LINEAR),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MAG_FILTER,m.LINEAR),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_S,m.REPEAT),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_T,m.REPEAT),m.texImage2D(m.TEXTURE_2D,0,m.RGB,1,1,0,m.RGB,m.UNSIGNED_BYTE,new Uint8Array([255,255,255]));var n={texture:r,width:1,height:1,attach:function(e){return m.activeTexture(m.TEXTURE0+e),m.bindTexture(m.TEXTURE_2D,r),e}},t=new Image;return t.onload=function(){n.width=t.width,n.height=t.height,m.bindTexture(m.TEXTURE_2D,r),m.texImage2D(m.TEXTURE_2D,0,m.RGB,m.RGB,m.UNSIGNED_BYTE,t)},t.src=e,n}(\"dither.png\");T(),P(parseInt(20*Math.random())+5);var E=Date.now();function T(){var s=g.halfFloatTexType,c=g.formatRGBA,d=g.formatRG,h=g.formatR,b=g.supportLinearFiltering?m.LINEAR:m.NEAREST,x=F(f.sim_resolution),R=F(f.dye_resolution),E=F(f.bloom_resolution);e=x.width,r=x.height,n=R.width,t=R.height,i=i?_(i,n,t,c.internalFormat,c.format,s,b):y(n,t,c.internalFormat,c.format,s,b),o=o?_(o,e,r,d.internalFormat,d.format,s,b):y(e,r,d.internalFormat,d.format,s,b),v=D(E.width,E.height,c.internalFormat,c.format,s,b),a=D(e,r,h.internalFormat,h.format,s,m.NEAREST),u=D(e,r,h.internalFormat,h.format,s,m.NEAREST),l=y(e,r,h.internalFormat,h.format,s,m.NEAREST),p.length=0;for(var T=0;T<f.bloom_iterations;T++){var S=E.width>>T+1,P=E.height>>T+1;if(S<2||P<2)break;var A=D(S,P,c.internalFormat,c.format,s,b);p.push(A)}}function y(e,r,n,t,i,o){var a=D(e,r,n,t,i,o),u=D(e,r,n,t,i,o);return{get read(){return a},set read(e){a=e},get write(){return u},set write(e){u=e},swap:function(){var e=a;a=u,u=e}}}function D(e,r,n,t,i,o){m.activeTexture(m.TEXTURE0);var a=m.createTexture();m.bindTexture(m.TEXTURE_2D,a),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MIN_FILTER,o),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MAG_FILTER,o),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_S,m.CLAMP_TO_EDGE),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_T,m.CLAMP_TO_EDGE),m.texImage2D(m.TEXTURE_2D,0,n,e,r,0,t,i,null);var u=m.createFramebuffer();return m.bindFramebuffer(m.FRAMEBUFFER,u),m.framebufferTexture2D(m.FRAMEBUFFER,m.COLOR_ATTACHMENT0,m.TEXTURE_2D,a,0),m.viewport(0,0,e,r),m.clear(m.COLOR_BUFFER_BIT),{texture:a,fbo:u,width:e,height:r,attach:function(e){return m.activeTexture(m.TEXTURE0+e),m.bindTexture(m.TEXTURE_2D,a),e}}}function _(e,r,n,t,i,o,a){return e.read=function(e,r,n,t,i,o,a){var u=D(r,n,t,i,o,a);return d.clearProgram.bind(),m.uniform1i(d.clearProgram.uniforms.uTexture,e.attach(0)),m.uniform1f(d.clearProgram.uniforms.value,1),x(u.fbo),u}(e.read,r,n,t,i,o,a),e.write=D(r,n,t,i,o,a),e}function S(a,u,l,v,s){m.viewport(0,0,e,r),d.splatProgram.bind(),m.uniform1i(d.splatProgram.uniforms.uTarget,o.read.attach(0)),m.uniform1f(d.splatProgram.uniforms.aspectRatio,c.width/c.height),m.uniform2f(d.splatProgram.uniforms.point,a/c.width,1-u/c.height),m.uniform3f(d.splatProgram.uniforms.color,l,-v,1),m.uniform1f(d.splatProgram.uniforms.radius,f.emitter_size/100),x(o.write.fbo),o.swap(),m.viewport(0,0,n,t),m.uniform1i(d.splatProgram.uniforms.uTarget,i.read.attach(0)),m.uniform3f(d.splatProgram.uniforms.color,s.r,s.g,s.b),x(i.write.fbo),i.swap()}function P(e){S(500,500,100,0,{r:255,b:0,g:0})}function A(){var e=function(e,r,n){var t,i,o,a,u,l,v,s;switch(a=Math.floor(6*e),l=n*(1-r),v=n*(1-(u=6*e-a)*r),s=n*(1-(1-u)*r),a%6){case 0:t=n,i=s,o=l;break;case 1:t=v,i=n,o=l;break;case 2:t=l,i=n,o=s;break;case 3:t=l,i=v,o=n;break;case 4:t=s,i=l,o=n;break;case 5:t=n,i=l,o=v}return{r:t,g:i,b:o}}(Math.random(),1,1);return e.r*=.15,e.g*=.15,e.b*=.15,e}function F(e){var r=m.drawingBufferWidth/m.drawingBufferHeight;r<1&&(r=1/r);var n=Math.round(e*r),t=Math.round(e);return m.drawingBufferWidth>m.drawingBufferHeight?{width:n,height:t}:{width:t,height:n}}function U(e,r,n){return{x:r/e.width,y:n/e.height}}!function y(){c.width==c.clientWidth&&c.height==c.clientHeight||(c.width=c.clientWidth,c.height=c.clientHeight,T());!function(){b.length>0&&P(b.pop());for(var e=0;e<h.length;e++){var r=h[e];r.moved&&(S(r.x,r.y,r.dx,r.dy,r.color),1!==e&&(r.moved=!1))}if(!f.multi_color)return;if(E+100<Date.now()){E=Date.now();for(var n=0;n<h.length;n++){var t=h[n];t.color=A()}}}();f.paused||function(v){m.disable(m.BLEND),m.viewport(0,0,e,r),d.curlProgram.bind(),m.uniform2f(d.curlProgram.uniforms.texelSize,1/e,1/r),m.uniform1i(d.curlProgram.uniforms.uVelocity,o.read.attach(0)),x(u.fbo),d.vorticityProgram.bind(),m.uniform2f(d.vorticityProgram.uniforms.texelSize,1/e,1/r),m.uniform1i(d.vorticityProgram.uniforms.uVelocity,o.read.attach(0)),m.uniform1i(d.vorticityProgram.uniforms.uCurl,u.attach(1)),m.uniform1f(d.vorticityProgram.uniforms.curl,f.curl),m.uniform1f(d.vorticityProgram.uniforms.dt,v),x(o.write.fbo),o.swap(),d.divergenceProgram.bind(),m.uniform2f(d.divergenceProgram.uniforms.texelSize,1/e,1/r),m.uniform1i(d.divergenceProgram.uniforms.uVelocity,o.read.attach(0)),x(a.fbo),d.clearProgram.bind(),m.uniform1i(d.clearProgram.uniforms.uTexture,l.read.attach(0)),m.uniform1f(d.clearProgram.uniforms.value,f.pressure),x(l.write.fbo),l.swap(),d.pressureProgram.bind(),m.uniform2f(d.pressureProgram.uniforms.texelSize,1/e,1/r),m.uniform1i(d.pressureProgram.uniforms.uDivergence,a.attach(0));for(var s=0;s<f.pressure_iteration;s++)m.uniform1i(d.pressureProgram.uniforms.uPressure,l.read.attach(1)),x(l.write.fbo),l.swap();d.gradientSubtractProgram.bind(),m.uniform2f(d.gradientSubtractProgram.uniforms.texelSize,1/e,1/r),m.uniform1i(d.gradientSubtractProgram.uniforms.uPressure,l.read.attach(0)),m.uniform1i(d.gradientSubtractProgram.uniforms.uVelocity,o.read.attach(1)),x(o.write.fbo),o.swap(),d.advectionProgram.bind(),m.uniform2f(d.advectionProgram.uniforms.texelSize,1/e,1/r),g.supportLinearFiltering||m.uniform2f(d.advectionProgram.uniforms.dyeTexelSize,1/e,1/r);var c=o.read.attach(0);m.uniform1i(d.advectionProgram.uniforms.uVelocity,c),m.uniform1i(d.advectionProgram.uniforms.uSource,c),m.uniform1f(d.advectionProgram.uniforms.dt,v),m.uniform1f(d.advectionProgram.uniforms.dissipation,f.velocity),x(o.write.fbo),o.swap(),m.viewport(0,0,n,t),g.supportLinearFiltering||m.uniform2f(d.advectionProgram.uniforms.dyeTexelSize,1/n,1/t);m.uniform1i(d.advectionProgram.uniforms.uVelocity,o.read.attach(0)),m.uniform1i(d.advectionProgram.uniforms.uSource,i.read.attach(1)),m.uniform1f(d.advectionProgram.uniforms.dissipation,f.dissipation),x(i.write.fbo),i.swap()}(.02);!function(e){f.render_bloom&&function(e,r){if(p.length<2)return;var n=r;m.disable(m.BLEND),d.bloomPreFilterProgram.bind();var t=f.threshold*f.soft_knee+1e-4,i=f.threshold-t,o=2*t,a=.25/t;m.uniform3f(d.bloomPreFilterProgram.uniforms.curve,i,o,a),m.uniform1f(d.bloomPreFilterProgram.uniforms.threshold,f.threshold),m.uniform1i(d.bloomPreFilterProgram.uniforms.uTexture,e.attach(0)),m.viewport(0,0,n.width,n.height),x(n.fbo),d.bloomBlurProgram.bind();for(var u=0;u<p.length;u++){var l=p[u];m.uniform2f(d.bloomBlurProgram.uniforms.texelSize,1/n.width,1/n.height),m.uniform1i(d.bloomBlurProgram.uniforms.uTexture,n.attach(0)),m.viewport(0,0,l.width,l.height),x(l.fbo),n=l}m.blendFunc(m.ONE,m.ONE),m.enable(m.BLEND);for(var v=p.length-2;v>=0;v--){var s=p[v];m.uniform2f(d.bloomBlurProgram.uniforms.texelSize,1/n.width,1/n.height),m.uniform1i(d.bloomBlurProgram.uniforms.uTexture,n.attach(0)),m.viewport(0,0,s.width,s.height),x(s.fbo),n=s}m.disable(m.BLEND),d.bloomFinalProgram.bind(),m.uniform2f(d.bloomFinalProgram.uniforms.texelSize,1/n.width,1/n.height),m.uniform1i(d.bloomFinalProgram.uniforms.uTexture,n.attach(0)),m.uniform1f(d.bloomFinalProgram.uniforms.intensity,f.intensity),m.viewport(0,0,r.width,r.height),x(r.fbo)}(i.read,v);null!=e&&f.transparent?m.disable(m.BLEND):(m.blendFunc(m.ONE,m.ONE_MINUS_SRC_ALPHA),m.enable(m.BLEND));var r=null==e?m.drawingBufferWidth:n,o=null==e?m.drawingBufferHeight:t;if(m.viewport(0,0,r,o),!f.transparent){d.colorProgram.bind();var a=f.background_color;m.uniform4f(d.colorProgram.uniforms.color,a.r/255,a.g/255,a.b/255,1),x(e)}null==e&&f.transparent&&(d.backgroundProgram.bind(),m.uniform1f(d.backgroundProgram.uniforms.aspectRatio,c.width/c.height),x(null));if(f.render_shaders){var u=f.render_bloom?d.displayBloomShadingProgram:d.displayShadingProgram;if(u.bind(),m.uniform2f(u.uniforms.texelSize,1/r,1/o),m.uniform1i(u.uniforms.uTexture,i.read.attach(0)),f.render_bloom){m.uniform1i(u.uniforms.uBloom,v.attach(1)),m.uniform1i(u.uniforms.uDithering,R.attach(2));var l=U(R,r,o);m.uniform2f(u.uniforms.ditherScale,l.x,l.y)}}else{var s=f.render_bloom?d.displayBloomProgram:d.displayProgram;if(s.bind(),m.uniform1i(s.uniforms.uTexture,i.read.attach(0)),f.render_bloom){m.uniform1i(s.uniforms.uBloom,v.attach(1)),m.uniform1i(s.uniforms.uDithering,R.attach(2));var g=U(R,r,o);m.uniform2f(s.uniforms.ditherScale,g.x,g.y)}}x(e)}(null);var D=requestAnimationFrame(y);s.is&&(m.clear(m.COLOR_BUFFER_BIT),cancelAnimationFrame(D))}(),c.addEventListener(\"mousemove\",function(e){h[0].moved=h[0].down,h[0].dx=5*(e.offsetX-h[0].x),h[0].dy=5*(e.offsetY-h[0].y),h[0].x=e.offsetX,h[0].y=e.offsetY}),c.addEventListener(\"mousedown\",function(){h[0].down=!0,h[0].color=A()}),window.addEventListener(\"mouseup\",function(){h[0].down=!1}),window.addEventListener(\"keydown\",function(e){\"KeyP\"===e.code&&(f.paused=!f.paused),\" \"===e.key&&b.push(parseInt(20*Math.random())+5)})}},{key:\"deactivate\",value:function(){this.deactivated.is=!0}},{key:\"reset\",value:function(){this.initWebGL(),this.activate()}},{key:\"mapBehaviors\",value:function(e){this.PARAMS=function(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?t(n,!0).forEach(function(r){i(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(n).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}({},this.PARAMS,{},e)}},{key:\"setAsBackground\",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];canvas.style.zIndex=e?\"-99\":\"0\",canvas.style.position=e?\"absolute\":\"relative\"}},{key:\"applyBackground\",value:function(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;switch(e=e.toLowerCase(),this.PARAMS.transparent=!0,e){case\"gradient\":t();break;case\"image\":i();break;case\"solid\":default:this.PARAMS.transparent=!1,this.PARAMS.background_color=r}function t(){var e=\"\";switch(n){case\"radial\":e=\"radial-gradient(\"+r+\")\";break;case\"conic\":e=\"conic-gradient(\"+r+\")\";break;case\"repeating-linear\":e=\"repeating-linear-gradient(\"+r+\")\";break;case\"repeating-radial\":e=\"repeating-radial-gradient(\"+r+\")\";break;case\"linear\":default:e=\"linear-gradient(\"+r+\")\"}canvas.style.backgroundImage=e}function i(){canvas.style.backgroundImage=\"url('\"+r+\"')\",n&&(canvas.style.backgroundRepeat=n.repeat?\"repeat\":\"no-repeat\",canvas.style.backgroundPosition=n.position?n.position:\"center\",canvas.style.backgroundSize=n.size?n.size:\"contain\",canvas.style.backgroundColor=n.color?n.color:\"none\")}this.reset()}}]),e}(),v=function(){function e(r,n,t){if(o(this,e),this.uniforms={},this.webGL=t,this.program=t.createProgram(),t.attachShader(this.program,r),t.attachShader(this.program,n),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))throw t.getProgramInfoLog(this.program);for(var i=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS),a=0;a<i;a++){var u=t.getActiveUniform(this.program,a).name;this.uniforms[u]=t.getUniformLocation(this.program,u)}}return u(e,[{key:\"bind\",value:function(){this.webGL.useProgram(this.program)}}]),e}();e.exports=l}]);","extractedComments":[]}